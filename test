import requests
import json
import time
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from tqdm import tqdm  # ✅ Progress bar

# Set your VirusTotal API key here
API_KEY = '71299b55577e69afeaf0177e6ce4fc88c8309a0ff2aacc7c30c4ad82c052e9c6'
HEADERS = {'x-apikey': API_KEY}

# IOC type detection function
def detect_ioc_type(ioc):
    if '.' in ioc and ':' not in ioc:
        if all(c.isdigit() or c == '.' for c in ioc):
            return 'ip_address'
        elif ioc.startswith('http'):
            return 'url'
        elif '.' in ioc:
            return 'domain'
    elif len(ioc) in (32, 40, 64):  # md5, sha1, sha256
        return 'file'
    return 'unknown'

# Query VirusTotal
def query_virustotal(ioc, ioc_type):
    url_map = {
        'ip_address': f'https://www.virustotal.com/api/v3/ip_addresses/{ioc}',
        'domain': f'https://www.virustotal.com/api/v3/domains/{ioc}',
        'url': f'https://www.virustotal.com/api/v3/urls/{requests.utils.quote(ioc)}',
        'file': f'https://www.virustotal.com/api/v3/files/{ioc}',
    }
    if ioc_type not in url_map:
        return None
    response = requests.get(url_map[ioc_type], headers=HEADERS)
    if response.status_code == 200:
        return response.json()
    return None

# Parse VT response
def parse_vt_data(ioc, ioc_type, data):
    try:
        analysis_stats = data['data']['attributes']['last_analysis_stats']
        analysis_results = data['data']['attributes']['last_analysis_results']
        total = sum(analysis_stats.values())
        malicious = analysis_stats.get('malicious', 0)
        flagged_by_ms = 'Microsoft' in analysis_results and analysis_results['Microsoft']['category'] != 'undetected'
        ms_result = analysis_results.get('Microsoft', {}).get('result', 'undetected')
        return {
            'IOC': ioc,
            'Type': ioc_type,
            'Total Engines': total,
            'Malicious': malicious,
            'Suspicious': analysis_stats.get('suspicious', 0),
            'Harmless': analysis_stats.get('harmless', 0),
            'Undetected': analysis_stats.get('undetected', 0),
            'Microsoft Detection': ms_result,
            'Flagged by Microsoft': 'Yes' if flagged_by_ms else 'No',
        }
    except KeyError:
        return {
            'IOC': ioc,
            'Type': ioc_type,
            'Error': 'Unable to parse data'
        }

# Read IOCs from file
def read_iocs_from_file(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file if line.strip()]

# Write results to Excel
def write_to_excel(results, output_file='virustotal_results.xlsx'):
    wb = Workbook()
    ws = wb.active
    ws.title = 'VirusTotal Results'

    headers = list(results[0].keys())
    ws.append(headers)

    red_fill = PatternFill(start_color='FFCCCC', end_color='FFCCCC', fill_type='solid')

    for result in results:
        row = [result.get(header, '') for header in headers]
        ws.append(row)
        if result.get('Flagged by Microsoft') == 'Yes':
            for cell in ws[ws.max_row]:
                cell.fill = red_fill

    wb.save(output_file)

# Main function with progress bar
def main():
    iocs = read_iocs_from_file(r'C:\Users\Abc\PycharmProjects\PythonProject\.venv\Scripts\iocs.txt')
    results = []
    print("Checking IOCs on VirusTotal...\n")
    for ioc in tqdm(iocs, desc="Processing IOCs", unit="IOC"):
        ioc_type = detect_ioc_type(ioc)
        data = query_virustotal(ioc, ioc_type)
        if data:
            parsed = parse_vt_data(ioc, ioc_type, data)
            results.append(parsed)
        else:
            results.append({'IOC': ioc, 'Type': ioc_type, 'Error': 'No data found'})
        time.sleep(15)  # Respect VT public API rate limit

    write_to_excel(results)
    print("\n✅ Results written to 'virustotal_results.xlsx'.")

if __name__ == '__main__':
    main()
 
